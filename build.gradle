/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample C++ project to get you started.
 * For more details take a look at the Building C++ applications and libraries chapter in the Gradle
 * User Manual available at https://docs.gradle.org/6.1.1/userguide/building_cpp_projects.html
 */

plugins {
    // Apply the cpp-application plugin to add support for building C++ executables
    id 'cpp-application'

    // Apply the cpp-unit-test plugin to add support for building and running C++ test executables
    id 'cpp-unit-test'

}

// Set the target operating system and architecture for this application
application {
    targetMachines.add(machines.linux.x86_64)
}

model {
    binaries {
        all {
            cppCompiler.define "NDEBUG"

            if ( toolchain in Gcc ) {
                // List of compiler arguments provided
                // A list and article about almost all except the two arguments can be
                // found at https://developers.redhat.com/blog/2018/03/21/compiler-and-linker-flags-gcc/
                cppCompiler.args "-Os", "-fno-access-control", "-D_FORTIFY_SOURCE=2", "-D_GLIBCXX_ASSERTIONS",
                            "-fasynchronous-unwind-tables", "-fexceptions", "-fpie -Wl, -pie", "-fpic -shared",
                            "-fplugin=annobin", "-fstack-clash-protection", "-fstack-protector-all", "-fstack-protector-strong",
                            "-g", "-grecord-gcc-switches", "-mcet -fcf-protection", "-pipe", "-Wall", "-Werror=format-security",
                            "-Werror=implicit-function-declaration", "-Wl,-z,defs", "-Wl,-z,now", "-Wl,-z,relro",
                            // The arguments added below are personally for the project itself
                            "-lpthread"

                linker.args "-Xlinker", "-S"
            }
            if (toolChain in VisualCpp) {
                cppCompiler.args "/Zi"
                linker.args "/DEBUG"
            }
        }
    }
}